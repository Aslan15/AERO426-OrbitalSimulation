function [] = driver()
    clc; close all;
    % CONSTANTS
    % Earth Properties
    earth.R = 6378.1;           % Radius [km]
    earth.mu = 398600.436233;   % Gravitational Parameter [km^3/s^2]
    earth.J2 = 1082.63;         % J2 effects

    % Moon
    moon.R = 1737.4;            % Radius [km]
    moon.mu = 4902.800076;      % Gravitational Parameter [km^3/s^2]
    moon.J2 = 202.7;            % J2 effects
    moon.a = 0.3844e6;          % Semi-major axis [km]     
    moon.e = 0.0549;            % Eccentricity [-]
    moon.i = 5.145;             % Inclination [°]
    moon.Om = 0.0;              % RAAN [°]
    moon.w = 0.0;               % Argument of perigee [°]
    moon.phi = 0.0;             % True anomaly [°]
    
    % Satellites    
    visir.r_0(1:3) = [247.122; 0.0; -4493.209];
    visir.r_0(4:6) = [0.0; 1.44467; 0.0];
    visir.nadir = 180;
    visir = cart2kep(moon, visir);
    
    n = 10; 
    sats{1} = struct(); 
    sats{1}.a = moon.R*2;
    sats{1}.e = 0.0;
    sats{1}.i = 90;
    sats{1}.Om = 0.0;
    sats{1}.w = 0.0;
    sats{1}.phi = 0.0;
    
    for i = 1:n
        if(i ~= 1)
            sats{i} = struct();
        end
        sats{i} = sats{1};
        sats{i}.phi = 360/n * i;
        sats{i} = kep2cart(moon, sats{i});
    end
    
    % INITIAL CONDITIONS - Earth-fixed frame to be considered inertial
    moon.r_0 = kep2cart(earth, moon);
    moon.t_0 = [0 120*24*3600];

    
    % ORBIT PROPAGATION
    % - VISIR
    opts = odeset('RelTol',1e-10,'AbsTol',1e-12);
    [visir.t, visir.r] = ode45(@(t,r) dr_s(t,r, earth, moon), moon.t_0, visir.r_0, opts);
    % - Relay Satellites
    r_s = orbitObject.r(i,1:3)';
    th1 = acosd(R/norm(r_s));
    th2 = acosd(R/norm(r_R));
    for i = 1:n
        [sats{i}.t, sats{i}.r] = ode45(@(t,r) dr_s(t,r, earth, moon), moon.t_0, sats{i}.r_0, opts);
    end
    
    % REVISIT TIMES
    visir = revisitTimes(moon, visir);
    for i = 1:n
       sats{i} = revisitTimes(moon,sats{i}); 
    end
    
    t_i = 0;
    inView = 0;
    while(t_i <= moon.t_0(2))
        for i = 0:n
           if(i == 0)
              for j = 1:length(visir.revisit)-1
                  if(t_i >= visir.revisit(j,2))&&(t_i < visir.revisit(j+1,2))
                      t_i = visir.revisit(j+1,2);
                      inView = inView + 1;
                      break;
                  end
              end
           else
              for j = 1:length(sats{i}.revisit)-1
                  if(t_i >= sats{i}.revisit(j,2))&&(t_i < sats{i}.revisit(j+1,2))
                      t_i = sats{i}.revisit(j+1,2);
                      inView = inView + 1;
                      break;
                  end
              end
           end
        end
        if(inView == 0)
           break;
        else
            inView = 0;
        end
    end
    
    if(inView)
        fprintf("The relays have constant communication with the ground station\n");
    else
        if((moon.t_0(2)-t_i)/3600 < 100)
            fprintf(moon.t_0(2)-t_i)/3600);
            fprintf("The relays DO NOT have constant communication with the ground station\n");
        end
    end

    % ORBIT PLOT
    figure
    plot3(visir.r(:,1), visir.r(:,2), visir.r(:,3));
    daspect([1 1 1]);
    grid on
    hold on
    [x,y,z] = sphere;
    surf(moon.R*x,moon.R*y,moon.R*z);
    xlabel("x-axis [km]");
    ylabel("y-axis [km]");
    zlabel("z-axis [km]");
    
    for i = 1:1
%         figure
        plot3(sats{i}.r(:,1), sats{i}.r(:,2), sats{i}.r(:,3));
        daspect([1 1 1]);
        grid on
        hold on
        [x,y,z] = sphere;
        surf(moon.R*x,moon.R*y,moon.R*z);
        xlabel("x-axis [km]");
        ylabel("y-axis [km]");
        zlabel("z-axis [km]");
    end
end

function [ orbitObject ] = revisitTimes(mainBody, orbitObject)
    R = mainBody.R;
    r_R = R*[0 0 1]';
    orbitObject.revisit = zeros(1,2);
    
    for i = 1:length(orbitObject.t)
        r_s = orbitObject.r(i,1:3)';
        
        theta = acosd( dot(r_s, r_R)/( norm(r_R) * norm(r_s) ) );
        th1 = acosd(R/norm(r_s));
        th2 = acosd(R/norm(r_R));
        [n m] = size(orbitObject.revisit);
        
        if( theta >= (th1 + th2) )
            % object IS in line of signt of the satellite
            if(i == 1)
                orbitObject.revisit(n,1:2) = [1 orbitObject.t(i)];
            elseif(orbitObject.revisit(n,1) == 0)
                orbitObject.revisit(n+1,1:2) = [1 orbitObject.t(i)];
            end
        else 
            % object is NOT in line of sight
            if(i == 1)
                orbitObject.revisit(n,1:2) = [0 orbitObject.t(i)];
            elseif(orbitObject.revisit(n,1) == 1)
                orbitObject.revisit(n+1,1:2) = [0 orbitObject.t(i)];
            end
        end
    end
end

function [ orbitObject ] = kep2cart(mainBody, orbitObject)
    % Converts keplerian inputs to cartesian

    %- Unpack object
    mu = mainBody.mu;
    a = orbitObject.a;
    e = orbitObject.e;
    i = orbitObject.i;
    Om = orbitObject.Om;
    w = orbitObject.w;
    phi = orbitObject.phi; 
    
    % - Calculate parameters
    p = a*(1 - e^2);
    r = p/(1 + e*cosd(phi));
    phi_d = (1 + e*cosd(phi))^2*sqrt(mu/p^3);
    r_d = p*e*sind(phi)*sqrt(mu/p^3);
    
    r1 = r*cosd(phi);
    r2 = r*sind(phi);
    r3 = 0.0;
    
    v1 = r_d*cosd(phi) - r*phi_d*sind(phi);
    v2 = r_d*sind(phi) + r*phi_d*cosd(phi);
    v3 = 0.0;
    
    r_vec = C_ck(w, i, Om)*[r1; r2; r3];
    v_vec = C_ck(w, i, Om)*[v1; v2; v3];
    
    % - Pack results
    x = r_vec(1);
    y = r_vec(2);
    z = r_vec(3);
    u = v_vec(1);
    v = v_vec(2);
    w = v_vec(3);
    
    orbitObject.r_0 = [x, y, z, u, v, w];
end

function [ orbitObject ] = cart2kep(mainBody, orbitObject)
    % Convert cartesian inputs to keplerian

    % - Unpack object
    mu = mainBody.mu;
    r = orbitObject.r_0(1:3);
    v = orbitObject.r_0(4:6);
    x = r(1);
    y = r(2);
    z = r(3);
    vx = v(1);
    vy = v(2);
    vz = v(3);
    
    
    % - Calculate and pack parameters
    h = cross(r,v);
    h_dir = h/norm(h);
    e_vec = (1/mu)*(cross(v, h) - mu * r / norm(r));
    a = mu / ( (2*mu/norm(r)) - norm(v)^2 );
    e = norm(e_vec);
    i = acosd(h_dir(3));
    Om = asind( h_dir(1)/sind(i) );
    phi = acosd( dot(e_vec, r) / (norm(e_vec)*norm(r)) );
    
    R1 = [1 0       0;
          0 cosd(i) -sind(i);
          0 sind(i) cosd(i)];
    R3 = [cosd(Om)  -sind(Om) 0;
          sind(Om)  cosd(Om)  0;
          0         0         1];
    e_p = R1*R3*e_vec';
    
    w = atan2d(-e_p(2),e_p(1));
    
    
    orbitObject.a = a;
    orbitObject.e = e;
    orbitObject.i = i;
    orbitObject.Om = Om;
    orbitObject.w = w;
    orbitObject.phi = phi;
end

function [ R ] = rel2in(sat, moon)
    R = sat.r_0;

    % Rotation Matrix
    L = cross( moon.r_0(1:3), moon.r_0(4:6) );
    e_mz = L/norm(L);   
    e_my = -moon.r_0(1:3)/norm(moon.r_0(1:3));
    e_mx = cross(e_my, e_mz);
    
    R(1:3) = R(1)*e_mx + R(2)*e_my + R(3)*e_mz + moon.r_0(1:3);
    R(4:6) = R(4)*e_mx + R(5)*e_my + R(6)*e_mz + moon.r_0(4:6); 
    R = R';
end

function [ C ] = C_kc(w, i, Om)
    % Rotation matrix from Cartesian to Kepplerian
    c11 = cosd(Om)*cosd(w) - sind(Om)*sind(w)*cosd(i);
    c12 = sind(Om)*cosd(w) + cosd(Om)*sind(w)*cosd(i);
    c13 = sind(w)*sind(i);
    c21 = -cosd(Om)*sind(w) - sind(Om)*cosd(w)*cosd(i);
    c22 = -sind(Om)*sind(w) + cosd(Om)*cosd(w)*cosd(i);
    c23 = cosd(w)*sind(i);
    c31 = sind(Om)*sind(i);
    c32 = -cosd(Om)*sind(i);
    c33 = cosd(i);

    C =  [ c11 c12 c13;
           c21 c22 c23;
           c31 c32 c33 ];
end

function [ C ] = C_ck(w, i, Om)
    % Rotation matrix from Kepplerian to Cartesian
    C = C_kc(w, i, Om);
    C = C';
end

function [ dr ] = dr_m(t,r, earth, moon)
    % - Kinematics -
    % Gravitational Parameters
    mu_e = earth.mu;
    mu_m = moon.mu;
    
    % Locations
    r_m = r(1:3);               % Position of the moon wrt earth
    r_s = r(4:6);               % Position of the satellite wrt earth
    r_rel = r(4:6) - r(1:3);    % Position of the satellite wrt the moon
    
    % Magniture of distances
    R_m = norm( r_m );
    R_s = norm( r_s );
    R_sm = norm( r_rel );
    
    % Equations of motion
    dr(1) = r(7);
    dr(2) = r(8);
    dr(3) = r(9);
    dr(4) = r(10);
    dr(5) = r(11);
    dr(6) = r(12);
    dr(7:9)   = - mu_e/R_m^3 * r_m;
    dr(10:12) = - mu_e/R_s^3 * r_s - mu_m/R_sm^3 * r_rel;
%     dr(10:12) = - mu_m/R_sm^3 * r_rel;
    
    dr = dr';
end

function [ dr ] = dr_s(t,r, earth, moon)
    % - Kinematics -
    % Gravitational Parameters
    mu_e = earth.mu;
    mu_m = moon.mu;
    
    % Locations
    r_s = r(1:3);               % Position of the satellite wrt the moon
    
    % Magniture of distances
    R_s = norm( r_s );
    
    % Equations of motion
    dr(1) = r(4);
    dr(2) = r(5);
    dr(3) = r(6);
    dr(4:6) = - mu_m/R_s^3 * r_s;
    
    dr = dr';
end

function [ T ] = calcT(r_0)
    T = 0;
end
